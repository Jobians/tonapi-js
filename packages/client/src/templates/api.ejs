<%
const { apiConfig, routes, utils, config } = it;
const { info, servers, externalDocs } = apiConfig;
const { _, require, formatDescription } = utils;

const server = (servers && servers[0]) || { url: "" };

const descriptionLines = _.compact([
  `@title ${info.title || "No title"}`,
  info.version && `@version ${info.version}`,
  info.license && `@license ${_.compact([
    info.license.name,
    info.license.url && `(${info.license.url})`,
  ]).join(" ")}`,
  info.termsOfService && `@termsOfService ${info.termsOfService}`,
  server.url && `@baseUrl ${server.url}`,
  externalDocs.url && `@externalDocs ${externalDocs.url}`,
  info.contact && `@contact ${_.compact([
    info.contact.name,
    info.contact.email && `<${info.contact.email}>`,
    info.contact.url && `(${info.contact.url})`,
  ]).join(" ")}`,
  info.description && " ",
  info.description && _.replace(formatDescription(info.description), /\n/g, "\n * "),
]);

const clearSchemaReferenceInformation = (obj) => {
    if (typeof obj !== 'object' || obj === null) {
        return obj;
    }

    if (typeof obj.type === 'string') {
      const { properties, items, additionalProperties, ...rest } = obj;

      const newRest = _.keys(rest).reduce((acc, key) => {
          if ((key === "$ref" || key[0] !== "$") && key !== 'example' && key !== 'description' ) {
            acc[key] = rest[key];
          }
          return acc;
      }, {});

      return {
        ...newRest,
        items: items && clearSchemaReferenceInformation(items),
        properties: properties && _.keys(properties).reduce((acc, key) => {
            acc[key] = clearSchemaReferenceInformation(properties[key]);
            return acc;
        }, {}),
        additionalProperties: typeof additionalProperties === 'object'
          ? clearSchemaReferenceInformation(additionalProperties)
          : additionalProperties,
      }
    }

    return _.keys(obj).filter(key => key === "$ref" || key[0] !== "$").reduce((acc, key) => {
          acc[key] = clearSchemaReferenceInformation(obj[key]);
          return acc;
    }, {});
};

const schemasObject = _.keys(config.originalSchema.components.schemas).reduce((acc, key) => {
    const fullKey = "#/components/schemas/" + key;
    acc[fullKey] = clearSchemaReferenceInformation(config.originalSchema.components.schemas[key]);
    return acc;
}, {});

// TODO: Maybe we will need this in the future
// const requestBodiesObject = _.keys(config.originalSchema.components.requestBodies).reduce((acc, key) => {
//     const fullKey = "#/components/requestBodies/" + key;
//     const requestBodyContent = config.originalSchema.components.requestBodies[key].content['application/json'];
//     // Skip requestBodies with content type other than application/json
//     acc[fullKey] = requestBodyContent && clearSchemaReferenceInformation(requestBodyContent.schema);
//     return acc;
// }, {});

const componentsJson = JSON.stringify({
  ...schemasObject,
  // ...requestBodiesObject
});

utils.clearSchemaReferenceInformation = clearSchemaReferenceInformation;

%>

const components =  <%~ componentsJson %>

<%~ includeFile('./utils.ejs') %>

<% if (config.httpClientType === config.constants.HTTP_CLIENT.AXIOS) { %> import type { AxiosRequestConfig, AxiosResponse } from "axios"; <% } %>

<% if (descriptionLines.length) { %>
/**
<% descriptionLines.forEach((descriptionLine) => { %>
* <%~ descriptionLine %>

<% }) %>
*/
<% } %>
export class TonApiClient {

<% if(config.singleHttpClient) { %>
  http: HttpClient;

  constructor (apiConfig: ApiConfig = {}) {
    const http = new HttpClient(apiConfig);
    this.http = http;
  }
<% } %>


<% if (routes.outOfModule) { %>
  <% for (const route of routes.outOfModule) { %>

  <%~ includeFile('./procedure-call.ejs', { ...it, route }) %>

  <% } %>
<% } %>

<% if (routes.combined) { %>
  <% for (const { routes: combinedRoutes = [], moduleName } of routes.combined) { %>
  <%~ moduleName %> = {
  <% for (const route of combinedRoutes) { %>

  <%~ includeFile('./procedure-call.ejs', { ...it, route }) %>

  <% } %>
  }
  <% } %>
<% } %>
}
